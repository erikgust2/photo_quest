// Mocks generated by Mockito 5.2.0 from annotations
// in photo_quest/test/profile_test.dart.
// Do not manually edit this file.

import 'dart:ui' as _i6;

import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:flutter/foundation.dart' as _i5;
import 'package:flutter/material.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:photo_quest/profile.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUser_0 extends _i1.Fake implements _i2.User {}

class _FakeProfilePage_1 extends _i1.Fake implements _i3.ProfilePage {
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeBuildContext_2 extends _i1.Fake implements _i4.BuildContext {}

class _FakeWidget_3 extends _i1.Fake implements _i4.Widget {
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_4 extends _i1.Fake implements _i4.DiagnosticsNode {
  @override
  String toString(
          {_i5.TextTreeConfiguration? parentConfiguration,
          _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [ProfilePageState].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfilePageState extends _i1.Mock implements _i3.ProfilePageState {
  MockProfilePageState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.User get user =>
      (super.noSuchMethod(Invocation.getter(#user), returnValue: _FakeUser_0())
          as _i2.User);
  @override
  List<_i4.Image> get images => (super.noSuchMethod(Invocation.getter(#images),
      returnValue: <_i4.Image>[]) as List<_i4.Image>);
  @override
  set images(List<_i4.Image>? _images) =>
      super.noSuchMethod(Invocation.setter(#images, _images),
          returnValueForMissingStub: null);
  @override
  _i3.ProfilePage get widget => (super.noSuchMethod(Invocation.getter(#widget),
      returnValue: _FakeProfilePage_1()) as _i3.ProfilePage);
  @override
  _i4.BuildContext get context =>
      (super.noSuchMethod(Invocation.getter(#context),
          returnValue: _FakeBuildContext_2()) as _i4.BuildContext);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  _i4.Widget buildProfilePicture() =>
      (super.noSuchMethod(Invocation.method(#buildProfilePicture, []),
          returnValue: _FakeWidget_3()) as _i4.Widget);
  @override
  _i4.Widget buildProfileInfo() =>
      (super.noSuchMethod(Invocation.method(#buildProfileInfo, []),
          returnValue: _FakeWidget_3()) as _i4.Widget);
  @override
  void initState() => super.noSuchMethod(Invocation.method(#initState, []),
      returnValueForMissingStub: null);
  @override
  _i4.Widget build(_i4.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#build, [context]),
          returnValue: _FakeWidget_3()) as _i4.Widget);
  @override
  void didUpdateWidget(_i3.ProfilePage? oldWidget) =>
      super.noSuchMethod(Invocation.method(#didUpdateWidget, [oldWidget]),
          returnValueForMissingStub: null);
  @override
  void reassemble() => super.noSuchMethod(Invocation.method(#reassemble, []),
      returnValueForMissingStub: null);
  @override
  void setState(_i6.VoidCallback? fn) =>
      super.noSuchMethod(Invocation.method(#setState, [fn]),
          returnValueForMissingStub: null);
  @override
  void deactivate() => super.noSuchMethod(Invocation.method(#deactivate, []),
      returnValueForMissingStub: null);
  @override
  void activate() => super.noSuchMethod(Invocation.method(#activate, []),
      returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void didChangeDependencies() =>
      super.noSuchMethod(Invocation.method(#didChangeDependencies, []),
          returnValueForMissingStub: null);
  @override
  void debugFillProperties(_i5.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(Invocation.method(#debugFillProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
  @override
  String toStringShort() => (super
          .noSuchMethod(Invocation.method(#toStringShort, []), returnValue: '')
      as String);
  @override
  _i4.DiagnosticsNode toDiagnosticsNode(
          {String? name, _i5.DiagnosticsTreeStyle? style}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toDiagnosticsNode, [], {#name: name, #style: style}),
          returnValue: _FakeDiagnosticsNode_4()) as _i4.DiagnosticsNode);
}
